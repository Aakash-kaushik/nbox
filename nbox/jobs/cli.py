from .utils import Subway
from ..utils import nbox_session

import logging
logger = logging.getLogger()
web_server_subway = Subway("https://nimblebox.ai", nbox_session)

################################################################################
# Jobs CLI
# ========
# This has functions for the CLI of NBX-Jobs
################################################################################

def new_job(project_name):
  logger.info("-" * 69)
  import os, re
  from datetime import datetime
  created_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

  out = re.findall("^[a-zA-Z_]+$", project_name)
  if not out:
    raise ValueError("Project name can only contain letters and underscore")

  if os.path.exists(project_name):
    raise ValueError(f"Project {project_name} already exists")
  
  logger.info(f"Creating a folder: {project_name}")
  os.mkdir(project_name)
  os.chdir(project_name)

  logger.info("Creating: exe.py")
  with open("exe.py", "w") as f:
    code_ = f'''
# Auto generated code by 'nbox jobs new' command
# project_name: {project_name}
# created_time: {created_time}

from nbox import Operator
from nbox.utils import folder
from nbox.network import Cron


def get_op() -> Operator:
  # since initialising your operator might require passing a bunch of arguments
  # you can use this function to get the operator by manually defining things here

  return None


def deploy():
  op: Operator = get_op()
  op.deploy(
    # if job_id is None, new job will be created with job_name
    job_id = job_id,     # :str: job id
    job_name = job_name, # :str: job name
    
    # simple scheduler like your Calender App
    schedule = Cron(
      hour,          # :int: Hour for the job to run
      minute,        # :int: Minute for the job to run
      days = [],     # :list: Days of the week for the job to run, first three characters
      months = [],   # :list: Months of the year for the job to run, first three characters
      starts = None, # :datetime: Starting datetime for the job
      ends = None,   # :datetime: Ending datetime for the job
    )

    # no need to change this
    init_folder = folder(__file__), # no need to change this
  )


def run():
  op: Operator = get_op()
  op(
    # if your operator is scheduled, avoid passing anything here
    # if your operator is run one time, try passing all inputs here
  )
'''

    code_ += '''
if __name__ == "__main__":
  from fire import Fire
  Fire({"deploy": deploy, "run": run})

# end of auto generated code'''
    f.write(code_.strip())

  with open("README.md", "w") as f:
    f.write(f'''
# '{project_name}' NBX-Jobs

This is an autogenerated README file for [NBX-Jobs](www.nimblebox.ai/jobs) which was:
* created at: {created_time}
* name: {project_name}

Steps to complete:

1. Add all your code module here in this folder
2. Add in requirements.txt file if needed
3. Fill The Three functions (`get_operator`, `deploy`, `run`) in exe.py
4. Run `python exe.py deploy`

Rule of Thumb:

1. If you are scheduling, your `op` forward should not takes arguments, otherwise
you are executing the same process over and over, which is not what you want.
If you still want to do so, try moving as much as possible to `__init__`.
2. If you are running this one-time, then you should define arguments in `run` function.

    '''.strip() + "\n")

  open("requirements.txt", "w").close() # ~ touch requirements.txt

  logger.info("Completed")
  logger.info("-" * 69)

def deploy(folder):
  """Deploy a job on NimbleBox.ai's NBX-Jobs. This convinience function will
  just run ``./exe.py deploy``

  Args:
    folder (str, optional): Folder to deploy. Defaults to "./".
  """

  import os, subprocess

  print(os.path.abspath(folder))

  os.chdir(folder)
  subprocess.call(["python3", "exe.py", "deploy"])
